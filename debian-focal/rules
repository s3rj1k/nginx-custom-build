#!/usr/bin/make -f

export DH_VERBOSE=1

export DEB_BUILD_MAINT_OPTIONS=hardening=+all
debian_cflags:=$(shell dpkg-buildflags --get CFLAGS) -fPIC $(shell dpkg-buildflags --get CPPFLAGS) -Wno-missing-field-initializers
debian_ldflags:=$(shell dpkg-buildflags --get LDFLAGS) -fPIC

DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/buildflags.mk

# export necessary perl hardenging flags
# see: src/http/modules/perl/Makefile.PL
DEBIAN_NGINX_PERL_LDFLAGS:= $(shell DEB_BUILD_MAINT_OPTIONS=hardening=+all dpkg-buildflags --get LDFLAGS)
export DEBIAN_NGINX_PERL_LDFLAGS

PKGS = nginx nginx-extra-modules

ARCH := $(shell arch)
# $(shell perl -MConfig -e 'print $Config{PERL_REVISION};')
PERL_REVISION := 5
# $(shell perl -MConfig -e 'print $Config{PERL_VERSION};')
PERL_VERSION := 20

BUILDDIR_nginx = $(CURDIR)/debian/build-nginx
INSTALLDIR = $(CURDIR)/debian/nginx
EXTRADYNMODULES = $(CURDIR)/debian/nginx-extra-modules
BASEDIR = $(CURDIR)
MODULESDIR = $(CURDIR)/modules

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
	NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
	ifeq (${NUMJOBS}, 0)
		NUMJOBS = 1
	endif
else
	NUMJOBS = 1
endif

DO_PKGS = $(PKGS)

config.env.%:
	dh_testdir
	mkdir -p $(BUILDDIR_$*)
	cp -Pa $(CURDIR)/auto $(BUILDDIR_$*)/
	cp -Pa $(CURDIR)/conf $(BUILDDIR_$*)/
	cp -Pa $(CURDIR)/configure $(BUILDDIR_$*)/
	cp -Pa $(CURDIR)/contrib $(BUILDDIR_$*)/
	cp -Pa $(CURDIR)/man $(BUILDDIR_$*)/
	cp -Pa $(CURDIR)/src $(BUILDDIR_$*)/
	touch $@

config.status.nginx: config.env.nginx
	cd $(BUILDDIR_nginx) && \
	CFLAGS="" ./configure \
		--prefix=/etc/nginx \
		--sbin-path=/usr/sbin/nginx \
		--modules-path=/usr/lib/nginx/modules \
		--conf-path=/etc/nginx/nginx.conf \
		--error-log-path=/var/log/nginx/error.log \
		--http-log-path=/var/log/nginx/access.log \
		--pid-path=/var/run/nginx.pid \
		--lock-path=/var/run/nginx.lock \
		--http-client-body-temp-path=/var/cache/nginx/client_temp \
		--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
		--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
		--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
		--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
		--user=nginx \
		--group=nginx \
		--with-compat \
		--with-file-aio \
		--with-threads \
		--with-pcre-jit \
		--with-ipv6 \
		--with-http_addition_module \
		--with-http_auth_request_module \
		--with-http_dav_module \
		--with-http_flv_module \
		--with-http_gunzip_module \
		--with-http_gzip_static_module \
		--with-http_mp4_module \
		--with-http_random_index_module \
		--with-http_realip_module \
		--with-http_secure_link_module \
		--with-http_slice_module \
		--with-http_ssl_module \
		--with-http_stub_status_module \
		--with-http_sub_module \
		--with-http_v2_module \
		--with-mail=dynamic \
		--with-mail_ssl_module \
		--with-stream=dynamic \
		--with-stream_ssl_module \
		--with-stream_realip_module \
		--with-stream_ssl_preread_module \
		--with-openssl=$(BASEDIR)/openssl \
		--with-http_geoip_module \
		--with-http_image_filter_module=dynamic \
		--with-http_xslt_module=dynamic \
		--with-http_perl_module=dynamic \
		--add-dynamic-module=$(MODULESDIR)/dav-ext \
		--add-dynamic-module=$(MODULESDIR)/pagespeed \
		--add-dynamic-module=$(MODULESDIR)/push-stream \
		--add-dynamic-module=$(MODULESDIR)/cache_purge \
		--add-dynamic-module=$(MODULESDIR)/enhanced_memcached \
		--add-dynamic-module=$(MODULESDIR)/njs/nginx \
		--with-cc-opt="$(debian_cflags)" \
		--with-ld-opt="$(debian_ldflags)"
	touch $@

build-arch.%: config.status.%
	dh_testdir
	dh_prep
	$(MAKE) -j$(NUMJOBS) -C $(BUILDDIR_$*) build

build-arch: build-arch.nginx
	dh_testdir
	touch $@

build-indep:
	dh_testdir
	touch $@

build: build-arch build-indep
	dh_testdir
	touch $@

clean:
	dh_testdir
	dh_testroot
	dh_clean
	rm -f $(CURDIR)/objs
	rm -rf $(CURDIR)/debian/build-*
	rm -f $(CURDIR)/debian/*.init
	find $(CURDIR) -maxdepth 1 -size 0 -delete

post-build:
	ln -s $(BUILDDIR_nginx)/objs $(CURDIR)/objs

install:
	dh_testdir
	dh_testroot
	dh_prep
	dh_installdirs
	dh_install

	mkdir -p $(EXTRADYNMODULES)/usr/lib/nginx/modules
	for so in `find $(BUILDDIR_nginx)/objs/ -maxdepth 1 -type f -name "*_perl_*.so" -o -name "*_image_filter_*.so" -o -name "*_xslt_filter_*.so" -o -name "*_cache_purge_*.so" -o -name "*_dav_ext_*.so" -o -name "*_enhanced_memcached_*.so" -o -name "*_push_stream_*.so" -o -name "*_pagespeed.so"`; do \
	    install -m755 $${so} $(EXTRADYNMODULES)/usr/lib/nginx/modules/ ; \
	    rm -f $${so} ; \
	done

	mkdir -p $(EXTRADYNMODULES)/usr/lib/$(ARCH)-linux-gnu/perl5/$(PERL_REVISION).$(PERL_VERSION)/auto/nginx
	install -m755 $(BUILDDIR_nginx)/objs/src/http/modules/perl/blib/arch/auto/nginx/nginx.so $(EXTRADYNMODULES)/usr/lib/$(ARCH)-linux-gnu/perl5/$(PERL_REVISION).$(PERL_VERSION)/auto/nginx
	install -m755 $(BUILDDIR_nginx)/objs/src/http/modules/perl/blib/lib/nginx.pm $(EXTRADYNMODULES)/usr/lib/$(ARCH)-linux-gnu/perl5/$(PERL_REVISION).$(PERL_VERSION)

	mkdir -p $(INSTALLDIR)/usr/lib/nginx/modules
	for so in `find $(BUILDDIR_nginx)/objs/ -maxdepth 1 -type f -name "*.so"`; do \
	    install -m755 $${so} $(INSTALLDIR)/usr/lib/nginx/modules/ ; \
	done

	mkdir -p $(INSTALLDIR)/usr/share/doc/nginx
	install -m 644 debian/CHANGES $(INSTALLDIR)/usr/share/doc/nginx/changelog
	install -m 644 debian/nginx.vh.default.conf $(INSTALLDIR)/etc/nginx/conf.d/default.conf
	ln -s /usr/lib/nginx/modules $(INSTALLDIR)/etc/nginx/modules

binary-indep: build post-build install
	dh_testdir
	dh_testroot
	dh_installman -i -pnginx
	dh_installdebconf
	sed -e 's/%%PROVIDES%%/nginx/g' \
		-e 's/%%DEFAULTSTART%%/2 3 4 5/g' \
		-e 's/%%DEFAULTSTOP%%/0 1 6/g' \
		< debian/nginx.init.in > debian/nginx.init
	dh_installinit -i -pnginx --no-restart-on-upgrade --no-start --name=nginx
	dh_systemd_enable -pnginx --name=nginx nginx.service
	dh_installlogrotate -i -pnginx --name=nginx

binary-arch: install
	dh_testdir
	dh_testroot
	dh_installchangelogs -a
	dh_installdocs -a
	dh_lintian -a
	dh_link -aA
	dh_strip -ai
	dh_compress -a
	dh_perl -a
	dh_fixperms -a
	dh_installdeb -a
	dh_shlibdeps -a
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb $(foreach p,$(DO_PKGS),-p$(p))

binary: binary-indep binary-arch

.PHONY: build clean binary-indep binary-arch binary install
